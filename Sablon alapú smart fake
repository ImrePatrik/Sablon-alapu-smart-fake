$.getScript('https://media.innogamescdn.com/com_DS_HU/scripts/supp_hotkeys.js');
var form = $('#command-data-form').get(0);

// Sablon kiválasztó
function selectTemplateByName(templateName) {
    var lowerName = templateName.trim().toLowerCase();
    var selector = Array.from(document.querySelectorAll('.troop_template_selector'))
        .find(a => a.textContent.trim().toLowerCase() === lowerName);
    if (!selector) {
        UI.ErrorMessage("Nincs ilyen nevű sablon: " + templateName, 5000);
        return false;
    }
    selector.click();
    return true;
}

function getArrivalDate(urll) {
    var dates;
    if (sessionStorage.getItem("smart_fake_date") != null) {
        dates = sessionStorage.getItem("smart_fake_date").split(",");
    } else {
        $.ajax({
            url: urll, async: false, success: function (result) {
                dates = $(result).find(".post > .text").eq(0).text().match(/\d+:\d+:\d+:\d+:\d+:\d+:\d+/g);
            }
        })
        sessionStorage.setItem("smart_fake_date", dates);
    }
    var min = dates[0].split(':');
    var max = dates[1].split(':');
    var min_time = new Date(parseInt(min[0]), parseInt(min[1]) - 1, parseInt(min[2]), parseInt(min[3]), parseInt(min[4]), parseInt(min[5]), parseInt(min[6]));
    var max_time = new Date(parseInt(max[0]), parseInt(max[1]) - 1, parseInt(max[2]), parseInt(max[3]), parseInt(max[4]), parseInt(max[5]), parseInt(max[6]));
    arrival = [min_time, max_time];
    return arrival;
}

function getCoordsByUrl(urll) {
    var coords;
    if (sessionStorage.getItem("smart_fake_coords") != null) {
        coords = sessionStorage.getItem("smart_fake_coords");
    } else {
        $.ajax({
            url: urll, async: false, success: function (result) {
                coords = $(result).find(".post > .text").eq(0).text().match(/\d+,\d+/g);
                for (var x = 0; x < coords.length; x++) {
                    coords[x] = coords[x].replace(",", "|");
                }
                coords = coords.join(" ");
            }
        })
        sessionStorage.setItem("smart_fake_coords", coords);
    }
    return coords;
}

function fnAjaxRequest(url, sendMethod, params, type) {
    var error = null, payload = null;
    win.$.ajax({
        "async": false,
        "url": url,
        "data": params,
        "dataType": type,
        "type": String(sendMethod || "GET").toUpperCase(),
        "error": function (req, status, err) { error = "ajax: " + status; },
        "success": function (data, status, req) { payload = data; }
    });
    if (error) throw (error);
    return payload;
}
function fnCreateConfig(name) { return win.$(fnAjaxRequest("/interface.php", "GET", { "func": name }, "xml")).find("config"); }
function fnCreateUnitConfig() { return fnCreateConfig("get_unit_info"); }

function distance(source, target) {
    var fields = Math.sqrt(Math.pow(source[1] - target[1], 2) + Math.pow(source[0] - target[0], 2));
    return fields;
}
function getSpeed(unit) {
    return parseFloat(unitConfig.find(unit + " speed").text());
}
function currentCoord() {
    return game_data.village.coord;
}
function travelTime(source, target, unit) {
    var unitSpeed = getSpeed(unit);
    var fields = distance(source, target);
    var tt = unitSpeed * fields;
    return tt;
}
function addTime(date, time) {
    var date_ms = date.getTime();
    time = time * 1000 * 60;
    newDate = date_ms + time;
    newDate = new Date(newDate);
    return newDate;
}
function getGoodCoords(coords, unit, minTime, maxTime) {
    var doc = document;
    var goodCoords = [];
    var servertime = window.$("#serverTime").html().match(/\d+/g);
    var serverDate = win.$("#serverDate").html().match(/\d+/g);
    serverTime = new Date(serverDate[1] + "/" + serverDate[0] + "/" + serverDate[2] + " " + servertime.join(":"));
    coords = coords.split(' ');
    closest = 60 * 500;
    far = 0;
    for (i = 0; i < coords.length - 1; i++) {
        coordsSplit = coords[i].split('|');
        travel = travelTime(coordsSplit, currentCoord().split("|"), unit);
        arrival = addTime(serverTime, travel);
        if (travel < closest) { closest = travel; }
        else if (travel > far) { far = travel; }
        if (arrival > minTime && arrival < maxTime) {
            goodCoords.push(coords[i]);
        }
    }
    if (goodCoords.length > 0) {
        index = Math.round(Math.random() * (goodCoords.length - 1));
        while (goodCoords.length > 0 && alreadySent(currentCoord(), goodCoords[index])) {
            goodCoords.splice(index, 1);
            if (goodCoords.length > 0) {
                index = Math.round(Math.random() * (goodCoords.length - 1));
            }
        }
        if (goodCoords.length > 0) {
            fillInCoords(goodCoords[index]);
            return goodCoords[index];
        } else {
            UI.ErrorMessage("Már minden fake kordira küldtél támadást. Próbáld később vagy válts egység típust", 5000);
            // return null; // ne legyen return főágban
        }
    } else {
        UI.ErrorMessage("Egy faluba se csapódnál a megadott időszak között." + "\n" + " Ekkor futtasd a scriptet: " + addTime(minTime, (-1) * far).toString() + " és " + addTime(maxTime, (-1) * closest).toString(), 6000);
        // return null;
    }
}
function fillInCoords(coords) {
    coordsSplit = coords.split('|');
    form.x.value = coordsSplit[0];
    form.y.value = coordsSplit[1];
    $('#place_target').find('input').val(coordsSplit[0] + '|' + coordsSplit[1]);
}
function alreadySent(myCoords, target) {
    if (sessionStorage.alreadySent) {
        history = JSON.parse(sessionStorage.alreadySent);
        if (myCoords in history) {
            if (history[myCoords].includes(target)) { return true }
            else { history[myCoords].push(target); return false }
        } else {
            history[myCoords] = [target];
            sessionStorage.alreadySent = JSON.stringify(history);
            return false
        }
    } else {
        history = {};
        history[myCoords] = [target];
        sessionStorage.alreadySent = JSON.stringify(history);
        return false
    }
}

function openUI() {
    var coords = typeof window.coords !== "undefined" ? window.coords : [];
    var coordsUrl = typeof window.coordsUrl !== "undefined" ? window.coordsUrl : "";
    var minArrival = typeof window.minArrival !== "undefined" ? window.minArrival : new Date();
    var maxArrival = typeof window.maxArrival !== "undefined" ? window.maxArrival : new Date(minArrival.getTime() + 1000 * 60 * 60);
    var arrivalUrl = typeof window.arrivalUrl !== "undefined" ? window.arrivalUrl : "";
    var templateName = typeof window.templateName !== "undefined" ? window.templateName : "";

    if (localStorage.smartFakeSettings) {
        savedSettings = localStorage.smartFakeSettings.split(":::");
        if (savedSettings[0] == "manual") {
            coords = savedSettings[1].replace(/,/g, " ");
            minArrival = new Date(savedSettings[2]);
            maxArrival = new Date(savedSettings[3]);
            templateName = savedSettings[4];
        } else {
            coordsUrl = savedSettings[1];
            arrivalUrl = savedSettings[2];
            templateName = savedSettings[3];
        }
    }

    var html = `
    <head></head>
    <body>
        <h1>Smart fake script</h1>
        <form>
        <fieldset>
            <legend>Adatforrás</legend>
            <p>
                <input type="radio" id="manual" name="source" value="manual" checked onchange="setManual()"> Manuális megadás
                <input type="radio" id="tribe" name="source" value="url" onchange="setByUrl()"> Beolvasás fórumról
            </p>
        </fieldset>
        <fieldset>
            <legend>Manuális beállítások</legend>
            <p>
                <h2>Fake koordináták</h2>
                <label>Koordináták:</label>
                <textarea id="coords" rows="5" cols="70" placeholder="Illeszd be a koordinátákat. Pld: 111|222 888|555" onchange="getCoords()">${coords}</textarea>
            </p>
            <p>
                <h2>Érkezési időablak</h2>
                <label>Tól</label>
                <input type="datetime-local" id="minDate" value="${dateToIsoFormat(minArrival)}" onchange="getArrival()">
                <label>Ig</label>
                <input type="datetime-local" id="maxDate" value="${dateToIsoFormat(maxArrival)}" onchange="getArrival()">
            </p>
        </fieldset>
        <fieldset>
            <legend>Fórum adat linkek</legend>
            <p>
                <label>Koordinátákhoz vezető link:</label>
                <input type="text" id="coordsUrl" placeholder="https://..." onchange="getCoordsUrl()" value="${coordsUrl}" disabled>
            </p>
            <p>
                <label>Érkezési ablakhoz link:</label>
                <input type="text" id="arrivalUrl" placeholder="https://..." onchange="getArrivalUrl()" value="${arrivalUrl}" disabled>
            </p>
        </fieldset>
        <fieldset>
            <legend>Sablon kiválasztása</legend>
            <label>Sablon neve:</label>
            <input type="text" id="templateName" placeholder="Pl.: fake, Teli nuke, Csomag" value="${templateName || ''}">
        </fieldset>
        </form>
        <p>
            <input type="button" class="btn evt-confirm-btn btn-confirm-yes" id="save" onclick="saveSettings()" value="Mentés">
            <input type="button" class="btn evt-confirm-btn btn-confirm-no" id="reset" onclick="reset()" value="Reset">
        </p>
    </body>
    `;
    Dialog.show("Script settings", html);

    document.getElementById("coordsUrl").disabled = true;
    document.getElementById("arrivalUrl").disabled = true;
    document.getElementById("coords").disabled = false;
}
function dateToIsoFormat(date) {
    offset = -(new Date().getTimezoneOffset() / 60);
    date = new Date(date.getTime() + 1000 * 60 * 60 * offset);
    return date.toISOString().split(".")[0];
}
function setManual() {
    mode = "manual";
    document.getElementById("coordsUrl").disabled = true;
    document.getElementById("arrivalUrl").disabled = true;
    document.getElementById("coords").disabled = false;
    document.getElementById("minDate").disabled = false;
    document.getElementById("maxDate").disabled = false;
}
function setByUrl() {
    mode = "byUrl";
    document.getElementById("coords").disabled = true;
    document.getElementById("minDate").disabled = true;
    document.getElementById("maxDate").disabled = true;
    document.getElementById("coordsUrl").disabled = false;
    document.getElementById("arrivalUrl").disabled = false;
}

function saveSettings() {
    var templateName = document.getElementById("templateName").value.trim();
    if (!templateName) {
        UI.ErrorMessage('Adj meg egy sablon nevet!', 5000);
        return;
    }
    if (mode == "manual") {
        coords = document.getElementById("coords").value.match(/\d\d\d\|\d\d\d/g);
        minArrival = new Date(document.getElementById("minDate").value);
        maxArrival = new Date(document.getElementById("maxDate").value);
        localStorage.smartFakeSettings = mode + ":::" + coords + ":::" + minArrival + ":::" + maxArrival + ":::" + templateName;
    } else {
        coordsUrl = document.getElementById("coordsUrl").value;
        arrivalUrl = document.getElementById("arrivalUrl").value;
        localStorage.smartFakeSettings = mode + ":::" + coordsUrl + ":::" + arrivalUrl + ":::" + templateName;
    }
    UI.SuccessMessage('Mentve', 3000);
}
function reset() {
    localStorage.removeItem("smartFakeSettings");
    coords = [];
    coordsUrl = "";
    minArrival = new Date();
    maxArrival = new Date(minArrival.getTime() + 1000 * 60 * 60);
    arrivalUrl = "";
    templateName = "";
    mode = "manual";
    openUI();
}

// Fő futtató logika a gyülekezőhely képernyőn
if (game_data.screen == 'place') {
    win = window;
    unitConfig = fnCreateUnitConfig();
    if (localStorage.smartFakeSettings) {
        settings = localStorage.smartFakeSettings;
        mode = settings.split(":::")[0];
        var templateName;
        var skipLogic = false;
        if (mode == "manual") {
            coords = settings.split(":::")[1];
            minArrival = new Date(settings.split(":::")[2]);
            maxArrival = new Date(settings.split(":::")[3]);
            templateName = settings.split(":::")[4];
        }
        else if (mode == "byUrl") {
            coords = getCoordsByUrl(settings.split(":::")[1]);
            dates = getArrivalDate(settings.split(":::")[2]);
            minArrival = dates[0];
            maxArrival = dates[1];
            templateName = settings.split(":::")[3];
        }
        if (!selectTemplateByName(templateName)) {
            skipLogic = true;
        }
        if (!skipLogic) {
            // További fake logic (pl. spy utazási ideje alapján)
            getGoodCoords(coords, "spy", minArrival, maxArrival);
        }
    }
    else {
        openUI();
    }
}
else {
    openUI();
}
