//Készítette: Patika30

(function() {
    // ---- UI Setup (KH design & footer) ----
    var old = document.getElementById('kh-draggable-ui');
    if (old) old.remove();
    var style = 'position:fixed;top:100px;left:100px;z-index:9999;' +
        'padding:18px 16px 24px 16px;' +
        'background:linear-gradient(135deg,#f4ecd2 70%,#dbb875 100%);' +
        'border:2.6px solid #b28c44;' +
        'border-radius:11px;' +
        'box-shadow:0 9px 32px #865e11b0,0 1.5px 0 #7f5315 inset;' +
        'max-width:520px;';
    var box = document.createElement('div');
    box.setAttribute('style', style);
    box.setAttribute('id', 'kh-draggable-ui');
    var prevForum = localStorage.getItem('kh_forum_link') || '';
    var prevSablonId = localStorage.getItem('kh_selected_sablon') || '';
    box.innerHTML = `
      <div id="kh-dragger" style="cursor:move;font-weight:bold;padding-bottom:11px;color:#403c33;font-size:17px;text-shadow:1px 1px 0 #fff6;">Sablon fake</div>
      <label style="color:#5c4a23;font-weight:600;">Fórum link:</label><br>
      <input type="text" id="kh-forum" style="width:320px;background:#fff7e1;border:1.8px solid #b28c44;border-radius:4px;margin-bottom:3px;"><br>
      <button id="kh-extract" style="margin-bottom:7px;background:#ceae74;color:#3a2e18;border:1.3px solid #8b6b29;border-radius:3px;font-weight:bold;">Koordináta beolvasás</button><br>
      <label style="color:#5c4a23;font-weight:600;">Sablon:</label>
      <select id="sablonvalaszto" style="margin-left:3px;margin-bottom:9px;background:#ffefc5;border:1.2px solid #b28c44;border-radius:4px;"></select>
      <span id="kh-status" style="margin-left:12px;color:#287728;font-weight:600;"></span>
      <div style="margin-top:20px;text-align:right;font-size:13px;color:#6e5c33;border-top:1px solid #d5bb83;padding-top:9px;">Készítette: Patika30</div>
    `;
    document.body.appendChild(box);

    // -- Automatikus fórumlink betöltés --
    var forumInput = document.getElementById('kh-forum');
    forumInput.value = prevForum;

    // -- Fórumlink mentése minden módosításnál --
    forumInput.addEventListener('input', function() {
        localStorage.setItem('kh_forum_link', forumInput.value.trim());
    });

    // --- Drag ---
    var dragger = box.querySelector('#kh-dragger'),
        isMoving = false,
        offsetX = 0,
        offsetY = 0;
    dragger.addEventListener('mousedown', function(e) {
        isMoving = true;
        offsetX = e.clientX - box.getBoundingClientRect().left;
        offsetY = e.clientY - box.getBoundingClientRect().top;
        document.body.style.userSelect = 'none';
    });
    document.addEventListener('mouseup', function() {
        isMoving = false;
        document.body.style.userSelect = '';
    });
    document.addEventListener('mousemove', function(e) {
        if (isMoving) {
            box.style.left = (e.clientX - offsetX) + 'px';
            box.style.top = (e.clientY - offsetY) + 'px';
        }
    });

    // ---- Sablonok ---
    var sablonok = [];
    document.querySelectorAll('table.vis .troop_template_selector').forEach(function(a) {
        var name = a.textContent.trim();
        var m = a.getAttribute('onclick').match(/TroopTemplates\.useTemplate\((\d+)\)/);
        if (m) sablonok.push({
            name: name,
            id: m[1]
        });
    });
    var sel = document.getElementById('sablonvalaszto');
    sel.innerHTML = '';
    var opt0 = document.createElement('option');
    opt0.value = '';
    opt0.textContent = '-- Sablon kiválasztása --';
    sel.appendChild(opt0);
    sablonok.forEach(function(s) {
        var opt = document.createElement('option');
        opt.value = s.id;
        opt.textContent = s.name;
        sel.appendChild(opt);
    });

    // Egységmaxoló logika
    function maxolEgys(sablonId) {
        TroopTemplates.useTemplate(sablonId);
        setTimeout(function() {
            var form = document.forms[0];
            var unitList = ["spear", "sword", "axe", "archer", "spy", "light", "marcher", "heavy", "ram", "catapult", "knight", "snob"];
            unitList.forEach(function(unit) {
                var input = form[unit];
                if (!input) return;
                var available = parseInt(
                    input.getAttribute('data-all-count') ||
                    input.getAttribute('data-max') ||
                    input.parentElement.innerText.match(/\d+/)?.[0] ||
                    "0", 10);
                var desired = parseInt(input.value, 10) || 0;
                if (!available || available === 0) input.value = "";
                else if (desired > available) input.value = available;
            });
        }, 200);
    }

    // Automatikus betöltés
    setTimeout(function() {
        if (prevSablonId && sel.querySelector('option[value="' + prevSablonId + '"]')) {
            sel.value = prevSablonId;
            maxolEgys(prevSablonId);
        }
    }, 0);

    // Manuális sablonváltás
    sel.onchange = function() {
        var val = this.value;
        if (!val) return;
        localStorage.setItem('kh_selected_sablon', val);
        maxolEgys(val);
    };

    // ---- XML speed/utazási idő előkészítése ----
    var unitConfig = null;

    function fetchUnitConfig(callback) {
        if (unitConfig) return callback(unitConfig);
        $.ajax({
            url: '/interface.php?func=get_unit_info',
            dataType: 'xml',
            success: function(xml) {
                unitConfig = $(xml);
                callback(unitConfig);
            }
        });
    }

    function getSpeedXML(unit) {
        // pl. "spear", "axe"... perc/mező (világ/egységsebességgel szorozva!)
        return parseFloat(unitConfig.find(unit + " speed").text());
    }

    // ---- Koordináta beolvasás ----
    document.getElementById('kh-extract').onclick = function() {
        var input = document.getElementById('kh-forum').value.trim();
        localStorage.setItem('kh_forum_link', input);
        fetchWorldSettings(function(ws) {
            var n = ws.night;
            console.log("Night bonus start:", n ? n.start : null);
            console.log("Night bonus end:", n ? n.end : null);
            fetchUnitConfig(function() {
                insertSmartCoord(input, n ? n.start : null, n ? n.end : null);
            });
        });
    };

    // Automatikus fórumlink betöltés támadáskor is
    if (prevForum) {
        fetchWorldSettings(function(ws) {
            var n = ws.night;
            console.log("Night bonus start:", n ? n.start : null);
            console.log("Night bonus end:", n ? n.end : null);
            fetchUnitConfig(function() {
                insertSmartCoord(prevForum, n ? n.start : null, n ? n.end : null);
            });
        });
    }

    // ---- DOM-alapú éjszakai bónusz kiolvasás ----
    function fetchWorldSettings(callback) {
        var url = location.origin + "/page/settings";
        $.ajax({
            url: url,
            success: function(data) {
                var html = $("<div>").html(data);
                var nightRow = html.find("td").filter(function() {
                    return $(this).text().trim() === "Éjszakai bónusz";
                }).closest("tr");
                var val = nightRow.find("td").eq(1).text();
                // Pl.: "Aktív ettől: 23:00 eddig: 7:00 +100% további védelem a támadások ellen."
                var matchNight = val.match(/Aktív ettől:\s*(\d{1,2}:\d{2})\s*eddig:\s*(\d{1,2}:\d{2})/);
                callback({
                    night: matchNight ? {
                        start: matchNight[1],
                        end: matchNight[2]
                    } : null
                });
                console.log("DOM-extracted night bonus:", matchNight ? matchNight[1] + "-" + matchNight[2] : "none");
            },
            error: function() {
                callback({
                    night: null
                });
                console.log("Error fetching world settings");
            }
        });
    }

    // ---- Core math ----
    function getServerTime() {
        var d = $("#serverDate").text().trim().split('.');
        var t = $("#serverTime").text().trim().split(':');
        if (d.length === 3 && t.length === 3) {
            var dt = new Date(+d[2], +d[1] - 1, +d[0], +t[0], +t[1], +t[2]);
            console.log("Server time constructed:", dt.toString());
            return dt;
        } else {
            var now = new Date();
            var dt = new Date(now.getFullYear(), now.getMonth(), now.getDate(), +t[0], +t[1], +t[2]);
            console.log("Server time fallback:", dt.toString());
            return dt;
        }
    }

    function dateFromCustom(s) {
        var p = s.split(':');
        return new Date(
            parseInt(p[0]), parseInt(p[1]) - 1, parseInt(p[2]),
            parseInt(p[3]), parseInt(p[4]), parseInt(p[5]), parseInt(p[6])
        );
    }

    function distance(a, b) {
        a = a.split('|').map(Number);
        b = b.split('|').map(Number);
        return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));
    }

    function getSlowestUnit(form) {
        var unitList = ["spear", "sword", "axe", "archer", "spy", "light", "marcher", "heavy", "ram", "catapult", "knight", "snob"];
        var slowestUnit = null,
            maxMin = 0;
        unitList.forEach(function(unit) {
            var num = parseInt(form[unit] && form[unit].value, 10);
            if (num > 0) {
                var mins = getSpeedXML(unit);
                if (!slowestUnit || mins > maxMin) {
                    slowestUnit = unit;
                    maxMin = mins;
                }
            }
        });
        return slowestUnit;
    }

    function inNightBonus(date, start, end) {
        console.log("Checking night bonus for", date.toString(), "against", start, "-", end);
        var h = date.getHours(),
            m = date.getMinutes();
        var st = start.split(':').map(Number),
            en = end.split(':').map(Number);
        var t = h * 60 + m,
            t0 = st[0] * 60 + st[1],
            t1 = en[0] * 60 + en[1];
        if (t0 < t1) {
            return (t >= t0 && t < t1);
        } else {
            return (t >= t0 || t < t1);
        }
    }

    function insertSmartCoord(url, nightStart, nightEnd) {
        $.ajax({
            url: url,
            success: function(result) {
                var txt = '';
                $(result).find('.post, .forum_message, .text').each(function() {
                    txt += $(this).text() + ' ';
                });
                txt = txt.replace(/(\d+),(\d+)/g, '$1|$2');
                var coords = txt.match(/\d+\|\d+/g) || [];
                var intervalRaw = txt.match(/(\d{4}:\d{2}:\d{2}:\d{1,2}:\d{2}:\d{2}:\d{3});(\d{4}:\d{2}:\d{2}:\d{1,2}:\d{2}:\d{2}:\d{3})/);
                if (!coords.length) {
                    document.getElementById('kh-status').textContent = "Nincs koordináta!";
                    console.log("No coordinates found!");
                    return;
                }
                if (!intervalRaw) {
                    document.getElementById('kh-status').textContent = "Nincs időintervallum!";
                    console.log("No time interval found!");
                    return;
                }
                var minArrival = dateFromCustom(intervalRaw[1]),
                    maxArrival = dateFromCustom(intervalRaw[2]);
                var myCoord = game_data.village.coord;
                var now = getServerTime();
                var form = document.forms[0];
                var slowestUnit = getSlowestUnit(form);
                if (!slowestUnit) {
                    document.getElementById('kh-status').textContent = "Jelölj ki legalább 1 egységet vagy sablont!";
                    console.log("No units selected!");
                    return;
                }
                var baseMinutes = getSpeedXML(slowestUnit);
                var possible = [];
                console.log("Coordinates found:", coords);
                console.log("Interval:", minArrival.toString(), "-", maxArrival.toString());
                console.log("Slowest unit for speed:", slowestUnit, "speed per field:", baseMinutes);
                coords.forEach(function(c) {
                    var dist = distance(myCoord, c);
                    var travelMinutes = dist * baseMinutes;
                    var arrival = new Date(now.getTime() + travelMinutes * 60000);
                    if (arrival >= minArrival && arrival <= maxArrival &&
                        (!nightStart || !nightEnd || !inNightBonus(arrival, nightStart, nightEnd))) {
                        possible.push({
                            coord: c,
                            arrival: arrival
                        });
                    }
                });
                console.log("Possible target coords:", possible.map(p => p.coord));
                if (possible.length === 0) {
                    document.getElementById('kh-status').textContent = "Nincs megfelelő koordináta az intervallumban/éjszakán kívül!";
                } else {
                    var target = possible[Math.floor(Math.random() * possible.length)];
                    var xy = target.coord.split('|');
                    form.x.value = xy[0];
                    form.y.value = xy[1];
                    document.getElementById('kh-status').textContent = "Koordináta: " + target.coord;
                }
            },
            error: function(err) {
                document.getElementById('kh-status').textContent = "Hiba a lekérésnél (" + err.status + "): " + err.statusText;
                console.log("Error fetching forum content:", err.status, err.statusText);
            }
        });
    }
})();
